const { ethers } = require("ethers");
require("dotenv").config();

console.log("🚀 Starting BSC Arbitrage Bot...");

// Configuration (Fixed parseUnits syntax)
const config = {
  rpcUrl: "https://bscrpc.com",
  privateKey: process.env.PRIVATE_KEY,
  contractAddress: process.env.CONTRACT_ADDRESS,
  minBorrow: ethers.parseUnits("50000", 18), // 50k USDT
  pairs: [
    {
      path: [
        "0x55d398326f99059fF775485246999027B3197955", // USDT
        "0x0782b6d8c4551B9760e74c0545a9bCD90bdc41E5", // lisUSD
        "0x55d398326f99059fF775485246999027B3197955"  // USDT
      ],
      dex: "PancakeSwap"
    }
  ]
};

// Rest of the script remains the same but replace:
// ethers.utils -> ethers
// .sub() -> - operator
// .mul() -> * operator
// .div() -> / operator

async function main() {
  const provider = new ethers.JsonRpcProvider(config.rpcUrl);
  const wallet = new ethers.Wallet(config.privateKey, provider);
  
  console.log(`✅ Connected to BSC. Current block: ${await provider.getBlockNumber()}`);
  console.log(`💰 Wallet address: ${wallet.address}`);

  const contract = new ethers.Contract(
    config.contractAddress,
    require("./artifacts/contracts/VenusArbitrage.sol/VenusArbitrage.json").abi,
    wallet
  );

  setInterval(async () => {
    try {
      console.log("\n🔎 Checking arbitrage...");
      const router = new ethers.Contract(
        "0x10ED43C718714eb63d5aA57B78B54704E256024E",
        require("./abis/PancakeRouter.json"),
        provider
      );
      
      const amounts = await router.getAmountsOut.staticCall(config.minBorrow, config.pairs[0].path);
      const profit = amounts[2] - config.minBorrow;
      
      console.log(`📊 Potential profit: ${ethers.formatUnits(profit, 18)} USDT`);

      if (profit > (config.minBorrow * 175n) / 10000n) {
        console.log("💡 Profit detected!");
        const tx = await contract.executeArbitrage(
          config.minBorrow,
          config.pairs[0].path,
          (config.minBorrow * 175n) / 10000n,
          { gasLimit: 800000 }
        );
        console.log(`📮 TX: ${tx.hash}`);
      }
    } catch (error) {
      console.error("❌ Error:", error.message);
    }
  }, 15000);
}

main();
