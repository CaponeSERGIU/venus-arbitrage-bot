const { ethers } = require("ethers");
require("dotenv").config();

// Validate environment variables
if (!process.env.PRIVATE_KEY || !process.env.CONTRACT_ADDRESS) {
  throw new Error("Missing environment variables in .env file");
}

// Configuration
const config = {
  rpcUrl: "https://bscrpc.com",
  privateKey: process.env.PRIVATE_KEY,
  contractAddress: process.env.CONTRACT_ADDRESS,
  minBorrow: ethers.parseUnits("50000", 18), // 50k USDT
  pairs: [
    {
      path: [
        "0x55d398326f99059fF775485246999027B3197955", // USDT
        "0x0782b6d8c4551B9760e74c0545a9bCD90bdc41E5", // lisUSD
        "0x55d398326f99059fF775485246999027B3197955"  // USDT
      ],
      dex: "PancakeSwap"
    }
  ]
};

async function main() {
  const provider = new ethers.JsonRpcProvider(config.rpcUrl);
  const wallet = new ethers.Wallet(config.privateKey, provider);
  console.log(`✅ Wallet: ${wallet.address}`);
  
  const contract = new ethers.Contract(
    config.contractAddress,
    require("./artifacts/contracts/VenusArbitrage.sol/VenusArbitrage.json").abi,
    wallet
  );

  setInterval(async () => {
    try {
      const amounts = await new ethers.Contract(
        "0x10ED43C718714eb63d5aA57B78B54704E256024E",
        require("./abis/PancakeRouter.json"),
        provider
      ).getAmountsOut.staticCall(config.minBorrow, config.pairs[0].path);

      if (amounts[2] > config.minBorrow + (config.minBorrow * 175n / 10000n)) {
        const tx = await contract.executeArbitrage(
          config.minBorrow,
          config.pairs[0].path,
          config.minBorrow * 175n / 10000n,
          { gasLimit: 800000 }
        );
        console.log(`✅ TX: ${tx.hash}`);
      }
    } catch (error) {
      console.error(error.message);
    }
  }, 15000);
}

main();
