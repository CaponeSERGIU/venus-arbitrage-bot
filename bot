const { ethers } = require("ethers");
require("dotenv").config();

console.log("🚀 Starting BSC Arbitrage Bot...");

// Configuration
const config = {
  rpcUrl: "https://bscrpc.com",
  privateKey: process.env.PRIVATE_KEY,
  contractAddress: process.env.CONTRACT_ADDRESS,
  minBorrow: ethers.utils.parseUnits("50000", 18), // 50k USDT
  pairs: [
    {
      path: [
        "0x55d398326f99059fF775485246999027B3197955", // USDT
        "0x0782b6d8c4551B9760e74c0545a9bCD90bdc41E5", // lisUSD
        "0x55d398326f99059fF775485246999027B3197955"  // USDT
      ],
      dex: "PancakeSwap"
    }
  ]
};

async function main() {
  // Initialize provider and wallet
  const provider = new ethers.providers.JsonRpcProvider(config.rpcUrl);
  const wallet = new ethers.Wallet(config.privateKey, provider);
  
  console.log(`✅ Connected to BSC. Current block: ${await provider.getBlockNumber()}`);
  console.log(`💰 Wallet address: ${wallet.address}`);

  // Load contract
  const contract = new ethers.Contract(
    config.contractAddress,
    require("./artifacts/contracts/VenusArbitrage.sol/VenusArbitrage.json").abi,
    wallet
  );

  console.log(`📜 Contract initialized at: ${config.contractAddress}`);

  // Start monitoring
  setInterval(async () => {
    try {
      console.log("\n🔎 Checking arbitrage opportunities...");
      const opportunity = config.pairs[0];
      
      // Get price data
      const router = new ethers.Contract(
        "0x10ED43C718714eb63d5aA57B78B54704E256024E",
        require("./abis/PancakeRouter.json"),
        provider
      );
      
      const amounts = await router.getAmountsOut(config.minBorrow, opportunity.path);
      const profit = amounts[2].sub(config.minBorrow);
      
      console.log(`📊 Potential profit: ${ethers.utils.formatUnits(profit, 18)} USDT`);

      if (profit.gt(config.minBorrow.mul(175).div(10000))) {
        console.log("💡 Profitable opportunity detected!");
        const tx = await contract.executeArbitrage(
          config.minBorrow,
          opportunity.path,
          config.minBorrow.mul(175).div(10000),
          { gasLimit: 800000 }
        );
        console.log(`📮 Transaction sent: ${tx.hash}`);
        const receipt = await tx.wait();
        console.log(`✅ Transaction confirmed in block ${receipt.blockNumber}`);
      } else {
        console.log("⏭️  No profitable trades available");
      }
    } catch (error) {
      console.error("❌ Error during execution:", error.message);
    }
  }, 15000); // Check every 15 seconds
}

main().catch(error => {
  console.error("🔥 Critical error:", error);
  process.exit(1);
});
